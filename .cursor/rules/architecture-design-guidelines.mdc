---
description: 
globs: 
alwaysApply: true
---
---
description:设计规范和最佳实践
globs:["'*.md"]
alwaysApply:true
---

# 设计规范

## 设计原则
- 遵循SOLID原则
- 优先考虑组合而非继承
- 保持高内聚低耦合
- 设计接口而非实现

## 架构风格
- 遵循领域驱动设计(DDD)
- 采用整洁架构
- 使用微服务架构
- 区分命令与查询职责分离(CQRS)

## 最佳实践
- API设计遵循RESTful风格
- 使用事件驱动架构处理异步业务场景
- 遵循防御性编程原则
- 设计易于测试的组件 


# 详设文档模板

## 一、业务分析
> 业务流程、业务活动、业务步骤的定位
> 业务流程：调用采用一位数字编码，例如a.，第一位a代表业务流程，均按照顺序编排
> 业务活动：调用采用两位数字编码，例如a.b.，第二位b代表业务活动，均按照顺序编排
> 业务步骤：调用采用三位数字编码，例如a.b.c.，第三位c代表业务步骤，均按照顺序编排

### 1. 名词定义
> 定义名词，介绍名词含义和案例

|名词|含义|举例|
|-----|-----|------|
| 名词1 | 名词含义 | 名词案例 |

### 2. 业务流程
> 表达业务流程流转，每个节点均为业务活动（两位数字编码）
> 用于描述业务主流程，使用mermaid流程图
> 业务流程跟架构图、API设计数字编码一一对应，体现申诉全流程主要节点

```mermaid
flowchart LR
    S([流程开始]) --> A[1.1 业务节点A]
    A --> B[1.2 业务节点B]
    B --> E([流程结束])
```

### 3. 领域模型
> 采用领域驱动设计（DDD），描述核心领域对象及关系，不表达属性

|领域对象|对象类型|对象属性|
|---|---|---|
|RootAggregate|聚合根|包括XX、XX、XX属性|
|EntityA|实体|包括XX、XX、XX属性|

```mermaid
erDiagram
    RootAggregate }|--|| EntityA : "关系A"
    RootAggregate ||--o{ EntityB : "关系B"
```

### 4. 能力定义
> 明确每个业务活动的能力、归属系统、功能说明（包括关键出入参）、SLA（TPS/QPS、RT TP95/TP99等）。


|流程节点|归属系统|接口/Topic|
|---|---|---|
|1.1 业务节点A|系统A|/api/RootAggregate/methodA|
|1.2 业务节点B|系统B|/api/RootAggregate/methodB|

## 二、详细设计
### 1. 容器架构
#### 服务划分
> 介绍分别有那些容器，各容器的职责
- 简要描述前后端、服务、数据库等分工。
#### 外部依赖
> 介绍依赖外部哪些容易
- 简要列举外部依赖（如文件存储、MQ、外部服务等）。
#### 架构图
> 用Mermaid C4Container图描述系统各容器及交互关系。
> 业务流程、活动、步骤编号与业务流程图、API编号保持一致。
> Person跟Container的Rel用业务活动
> Container之间的Rel用业务步骤

```mermaid
C4Container
    Person(user, "用户")

    Container_Boundary(c1, "xx系统") {
        Container(app, "应用服务", "技术栈", "描述")
        ContainerDb(db, "数据库", "类型", "描述")
    }

    Rel_D(user, app, "1.1 HTTP调用")
    UpdateRelStyle(user, app, $offsetX="-30", $offsetY="0")
    Rel_D(app, db, "1.1.1 数据存取")
    UpdateRelStyle(app, db, $offsetX="-30", $offsetY="0")
```

### 2. API设计
> 定义业务活动对应的API，对标####架构图中定义的两位数字编码的业务活动，关键步骤对标三位数字编码的业务步骤
> 每个接口用表格描述，字段包括API签名、请求参数、响应结果、关键步骤（编号）、状态和异常。

|API事项|具体说明|
|----|----|
|API签名|`/api/path`|
|请求参数|`{"param":""}`|
|响应结果|`{"result":""}`|
|关键步骤|- 1.1.1 步骤一<br/>- 1.1.2 步骤二|
|状态和异常|400、500|

### 3. 逻辑模型
#### 关键类图
> 基于领域模型设计的关键领域对象类和属性
```mermaid
classDiagram
    class RootEntity {
        +property1
        +property2
    }
```
#### 状态流转
> 定义关键对象状态机，描述状态流转
```mermaid
stateDiagram-v2
    [*] --> 状态A
    状态A --> 状态B
```
#### 处理时序
> 参考API设计定义每个API的处理时序，重点突出关键步骤，每个主要API/业务活动有独立时序图。
> 按用户接口、应用服务、领域服务、基础设施分层，表达一个API接口实现的具体过程

```mermaid
sequenceDiagram
    participant A
    participant B
    A->>B: 操作
```

### 4. 数据模型
> 定义主要表的实体关系和表结构

#### ER关系
```mermaid
erDiagram
    TableA ||--o{ TableB : "1:N"
```
#### 表结构
```sql
-- 表结构示例
CREATE TABLE `table_a` (
    `id` bigint NOT NULL,
    PRIMARY KEY (`id`)
);
```
