---
description:
globs:
alwaysApply: false
---
# 编码规范

## 包结构
- 遵循领域驱动设计的包结构
- 使用基于功能的包组织方式
- 相关类保持在同一个包中

## 命名规范
- 使用清晰、描述性的名称，反映其用途
- 遵循Java命名约定：
  - 类名：大驼峰式（如 `OrderService`）
  - 方法/变量：小驼峰式（如 `createOrder`）
  - 常量：大写下划线（如 `MAX_RETRY_COUNT`）
- 后缀约定：
  - 接口：无特定后缀（如 `OrderRepository`）
  - 实现类：使用Impl后缀（如 `OrderRepositoryImpl`）
  - 数据传输对象：使用DTO后缀（如 `OrderDTO`）
  - 工厂类：使用Factory后缀（如 `OrderFactory`）

## 代码组织
- 一个文件只包含一个类
- 文件最大长度：500行
- 方法最大长度：30行
- 行最大长度：120字符

## 领域驱动设计模式
- 使用聚合来维护一致性边界
- 实现值对象表示不可变概念
- 使用工厂模式创建复杂对象
- 实现仓储模式进行持久化
- 使用领域事件进行跨边界通信

## 错误处理
- 使用领域特定的异常
- 避免返回null，使用Optional
- 在适当的层级处理异常
- 文档化异常情况

## 测试
- 为所有业务逻辑编写单元测试
- 使用有意义的测试名称描述场景
- 遵循AAA模式（准备-执行-断言）
- 模拟外部依赖
- 确保领域层有高测试覆盖率

## 文档
- 为公共API编写文档
- 包含用途和使用示例
- 记录非显而易见的实现细节
- 保持文档与代码同步更新

## 最佳实践
- 遵循SOLID原则
- 保持方法小而专注
- 避免代码重复
- 使用依赖注入
- 明确声明依赖关系
- 尽可能使用不可变对象
- 验证输入参数
