---
description: 
globs: 
alwaysApply: true
---
---
description:Git提交和版本控制规范
globs:[".git/*", "*.git"]
alwaysApply:true
---

# Git规范

## 分支管理
- main/master:主分支，保持稳定可发布状态
- develop:开发分支，包含最新开发特性
- feature/*:功能分支，用于开发新功能
- bugfix/*:修复分支，用于修复bug
- release/*:发布分支，用于准备发布

## 分支策略
```
---
title: Git Feature Diagram
---
gitGraph
    commit
    branch develop
    checkout develop
    commit
    branch feature/feature-V1.0.0
    checkout feature/feature-V1.0.0
    commit
    commit
    checkout develop
    merge feature/feature-V1.0.0
    branch release/v1.2.0
    commit
    checkout main
    merge release/v1.2.0
    tag v1.2.0
    checkout develop
    merge release/v1.2.0
```

## 提交规范
git提交记录遵从该模式:
```
<type>(<scope>): <subject>
<BLANK LINE>
<body>
<BLANK LINE>
<footer>
```

type的枚举说明：
- feature:新增功能
- fix bug:修复bug
- docs:文档注释
- style:代码格式(不影响代码运行的变动)
- refactor:重构、优化(既不增加新功能，也不是修)
- performance:性能优化
- test:增加测试
- chore:构建过程或辅助工具的变动
- revert:回退

示例：
```
feature(payment): 集成支付宝

- 实现支付宝SDK
- 增加支付回调

Resolves: PROJ-123
Related: PROJ-456
```

## 重要原则
- 重要:当采用@Commit 命令或明确提示提交代码时，允许自动提交代码，其他情况，不要自动提交代码
- 提交后自动Push到远程
- 提交前确保代码通过所有测试
- 保持提交信息简洁明了，描述清楚变更内容
- 避免大型提交，尽量将变更分解为小的、相关的提交

## 规范细则

本文档中的关键词 "必须（MUST）"、"禁止（MUST NOT）"、"必需（REQUIRED）"、"应（SHALL）"、"不应（SHALL NOT）"、"应当（SHOULD）"、"不应当（SHOULD NOT）"、"建议（RECOMMENDED）"、"可（MAY）" 和 "可选（OPTIONAL）" 均遵循 RFC 2119 标准释义。  

1. 提交前缀规则  
   - 提交信息必须以类型（type） 作为前缀，类型为名词（如 `feature`, `fix` 等）  
   - 其后可跟随可选作用域（scope）、可选符号 `!`  
   - 必需以结尾冒号加空格终止，格式示例：`类型(作用域)!: 描述`  

2. 类型（Type）规范  
   - 当提交为应用或库新增功能时，必须使用 `feature` 类型  
   - 当提交为修复缺陷时，必须使用 `fix` 类型  
   - 允许使用其他类型（如 `docs: 更新参考文档`）  

3. 作用域（Scope）规范  
   - 类型后可添加作用域，作用域必须为括号包裹的名词（例：`fix(解析器):`）  
   - 作用域用于描述代码库的特定模块  

4. 描述（Description）规范  
   - 类型/作用域前缀后必须紧跟冒号与空格，其后为描述（代码变更的简短摘要）  
   - 示例：`fix: 修复字符串含多空格时的数组解析问题`  

5. 正文（Body）规范  
   - 可在简短描述后添加正文，提供代码变更的额外上下文  
   - 正文必须在描述后空一行开始  
   - 正文为自由格式，可包含多个换行分隔的段落  

6. 脚注（Footer）规范  
   - 可在正文后空一行添加一个或多个脚注  
   - 每个脚注必须包含：  
     - 单词令牌（token）（如 `Reviewed-by`）  
     - 分隔符 `:<空格>` 或 `<空格>#`（受 Git 约定启发）  
   - 令牌必须用连字符 `-` 替代空格（例：`Acked-by`）  
     - 例外：`BREAKING CHANGE` 可作为令牌直接使用  
   - 值可包含空格和换行符  
   - 解析必须在检测到下一个有效脚注令牌/分隔符时终止  

7. 重大变更（Breaking Change）标识规则  
   - 必须在类型/作用域前缀或脚注中标识重大变更  
   - 脚注标识法：  
     - 必须使用全大写文本 `BREAKING CHANGE:`  
     - 后接冒号、空格及描述（例：`BREAKING CHANGE: 环境变量现在优先于配置文件`）  
   - 前缀标识法：  
     - 必须在冒号前添加 `!` 符号（例：`feature(api)!: 重构接口`）  
     - 若使用 `!`，脚注中的 `BREAKING CHANGE:` 可省略  
     - 提交描述应用于说明重大变更  

8. 大小写规则  
   - 除 `BREAKING CHANGE` 必须全大写外  
   - 规范提交的信息单元禁止区分大小写  
   - `BREAKING-CHANGE` 在脚注中与 `BREAKING CHANGE` 同义  
