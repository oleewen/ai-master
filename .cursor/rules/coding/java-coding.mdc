---
description: 
globs: 
alwaysApply: true
---
---
description:Java代码规范
globs:["*.java"]
alwaysApply:false
---
你是Java编程的专家，精通Java语言、Spring Boot、Spring 框架、Maven、JUnit及相关Java技术中间件。

# Java代码规范
## 编码约束
- 基于Dubbo或Spring Controller提供API服务
- 使用Spring Boot启动工程和管理依赖
- 准确使用注解，例如@SpriotApplication、@RestController、@Service
- 合理利用Spring Boot自动配置机制
- 使用@ControllerAdvice + @ExceptionHandler实现全局异常处理
- 优先使用Java 17+特性
- 优先使用Bean Validation，例如@Valid
- 使用Profile实现多环境配置
- 使用@ConfigurationProperties
- 使用JUnit 4测试框架，支持Mock，支持@SpringBootTest
- 使用Maven管理依赖和构建程序

## 代码规范
### 命名规范
#### 命名原则
- 业务语义优先，望文生义
- 可读性优先，词义明确
- 禁止美元符号、下划线
- 禁止拼音和英文混合
#### 变量命名
- lowCamelCase驼峰风格
- 布尔类型属性不加is前缀
- 货币以最小单位整型存储
- 数组命名类型紧连中括号
- 作用域范围不允许重名
- 完整词组合表达，杜绝非通用缩写
#### 常量命名
- 全大写，下划线分隔
- 禁用魔法值（未预先定义的常量）
- 尽量避免常量类，常量放在实体类
#### 方法命名
- lowCamelCase驼峰风格
#### 类名命名
- UpperCamelCase驼峰风格
- DO/DTO等专有名词缩写例外
- 抽象类以Abstract开头
- 测试类以Test结尾
- 异常类以Exception结尾
- 推荐单数形式，不强制
#### 包名命名
- 统一使用小写，圆点.分隔
- 统一使用单数形式

### 异常规范
#### 捕捉原则
- 异常不可作为流程及条件控制
- 异常在顶层入口和底层出口捕捉
- 捕捉异常和抛异常须完全配合
- 捕获异常必须处理，不可吞噬
#### 异常定义
- 区分unchecked/checked异常
- 忌直接抛出RuntimeException
- 请尽可能使用业界定义的异常
#### 异常处理
- catch中要打印堆栈信息
- finally中要对资源及流对象关闭
- 禁止finally中使用return
- 处理异常若存在事务要手动回滚
- 应用内部出错推荐异常抛出
- 系统间通信使用状态码返回
- 异常切忌在系统间进行传递

### 日志规范
#### 原则
- 日志需分类合理，日志名称语义明确
#### 使用方式
- 必须使用SLF4J作为日志API
- 日志必须保留至少1-2周
- INFO级别以下条件或占位符输出
- 避免重复打日志，additivity=false
- 日志级别日常用INFO，生产用WARN
#### 日志格式
- 内容含时间、类名、方法名、结果
- 异常日志要包含上下文和堆栈信息

### 格式规范
#### 括号
- 括号与字符之间不出现空格
- 左大括号前不换行
- 左大括号后及右大括号前换行
- 控制语句开始处与括号之间保留空格
#### 空格
- 注释双斜线与内容间只需一个空格
- 代码使用4空格缩进
- 方法入参逗号后必须加空格
- 运算符左右都需要空格
#### IDE
- IDE的text encoding设置为UTF8
- IDE文件换行符使用Unix格式
- 不同逻辑，语义及业务使用空行分割
- 单行字符数不超过120个

### 注释规范
#### 注释原则
- 凡是写注释的地方优先用代码表述
- 从业务场景、用户视角描述
- 业务规则有明确的注释
- 分支、转折需特别注释
#### 格式
- 类属性、方法用 /** */ 格式
- 抽象方法用javadoc注释
- 类必须添加作者、日期
- 方法内单行注释用//，多行用 /* */ 
- 枚举类字段必须有注释，解释含义

### 通信规范
#### 系统间
- 服务提供方禁止给消费方返回空
- 系统间通信使用response对象
- 通过response对象判定调用结果
- 系统间调用2s作为默认超时时间
#### 系统内
- 层与层之间调用结果无需包装
- 方法失败使用异常方式传递结果
- API层设置异常拦截接收失败结果

### OOP规范
#### 方法
- 方法复写加@Override
- 在用API不许修改方法签名
- 过时接口加@Deprecated
- 禁止使用已过时方法
- 参数个数不超过5
- 禁用Object.clone()
#### 类
- 避免用对象访问类静态变量
- 业务逻辑禁用构造器，应用init
- serialVersionUID尽可能不修改
- 过时类加@Deprecated
- 禁用已过时类
#### 比较
- equals比较优先用常量调用
- 整型包装类值比较使用equals
- 浮点型等值有误差，用BigDecimal运算
#### 集合
- 遍历集合使用foreach操作对象
- 集合对象更改需考虑并发加锁
- 集合转数组使用toArray方法
- ArrayList的subList勿强转ArrayList
#### 锁
- 并发修改数据时考虑加锁
- 最大限度减少加锁范围
- 多资源加锁时考虑顺序避免死锁
#### 线程
- 线程&线程池命名语义要明确
- 用ThreadPoolExecutor创建线程池
- 线程资源从线程池中获取
- 执行定时任务时请使用ScheduledExecutorService
- 获取单例或方法要保证线程安全
- 尽量使用Instant及LocalDateTime
#### 控制
- switch使用break/return来终止
- switch最后必须包含default分支
- if/else/for/while/do必须有大括号
- 高并发勿使用"等于"作为中断




