---
description: 
globs: 
alwaysApply: true
---
---
description:Maven管理规范
globs:["*.pom"]
alwaysApply:true
---
# Maven使用规范

## 依赖管理

### 版本管理
- 采用3位版本号管理
  - 主版本：架构级变更（不向前兼容）
  - 次版本：功能增加（向前兼容）
  - 修订号：Bug修复/优化
- 在父POM中统一管理依赖版本
- 使用`<dependencyManagement>`声明版本
- 子模块不指定版本号

### 依赖原则
- 遵循最小依赖原则
- 避免依赖冲突
- 定期更新依赖版本
- 使用`<optional>`和`<scope>`控制依赖范围

## 构建配置

### 插件管理
- 在父POM中统一管理插件版本
- 使用`<pluginManagement>`声明插件
- 配置公共的插件执行目标

### 资源过滤
- 使用`<resources>`配置资源目录
- 开启资源过滤功能
- 统一配置文件编码

## 配置示例

### 父POM示例
```xml
<project>
    <modelVersion>4.0.0</modelVersion>
    
    <groupId>com.example</groupId>
    <artifactId>project-parent</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <packaging>pom</packaging>
    
    <properties>
        <java.version>17</java.version>
        <spring-boot.version>3.0.0</spring-boot.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    
    <dependencyManagement>
        <dependencies>
            <!-- 依赖版本管理 -->
        </dependencies>
    </dependencyManagement>
    
    <build>
        <pluginManagement>
            <plugins>
                <!-- 插件管理 -->
            </plugins>
        </pluginManagement>
    </build>
</project>
```

### 子模块POM示例
```xml
<project>
    <parent>
        <groupId>com.example</groupId>
        <artifactId>project-parent</artifactId>
        <version>1.0.0-SNAPSHOT</version>
    </parent>
    
    <artifactId>project-module</artifactId>
    
    <dependencies>
        <!-- 模块依赖 -->
    </dependencies>
</project>
```

## 构建生命周期

### 主要阶段
1. validate - 验证项目正确性
2. compile - 编译源代码
3. test - 运行测试
4. package - 打包
5. verify - 检查包是否有效
6. install - 安装到本地仓库
7. deploy - 部署到远程仓库

### 构建命令
```bash
# 清理构建产物
mvn clean

# 编译项目
mvn compile

# 运行测试
mvn test

# 打包项目
mvn package

# 安装到本地
mvn install

# 跳过测试打包
mvn package -DskipTests
```

## 最佳实践

### 依赖管理
- 使用BOM（Bill of Materials）管理依赖
- 及时清理无用依赖
- 避免使用SNAPSHOT版本
- 使用依赖分析插件检查依赖

### 构建优化
- 配置合适的JVM参数
- 使用并行构建
- 配置构建缓存
- 跳过不必要的构建步骤

### 版本管理
- 使用语义化版本号
- 统一管理版本号
- 使用版本占位符
- 定期升级依赖版本

### 多环境配置
- 使用profile管理不同环境
- 资源文件使用占位符
- 敏感信息使用加密配置
- 环境相关配置外部化

## 常见问题

### 依赖冲突
- 使用`mvn dependency:tree`查看依赖树
- 使用`<exclusions>`排除冲突依赖
- 显式声明需要的版本

### 编码问题
- 设置源码编码
- 设置资源文件编码
- 设置报告编码

### 测试问题
- 配置测试资源目录
- 设置测试包含/排除规则
- 配置测试并行执行
